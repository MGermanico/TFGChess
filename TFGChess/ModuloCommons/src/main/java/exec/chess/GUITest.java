package exec.chess;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import com.chess.general.ChessManager;
import com.chess.general.Chessboard;
import com.chess.general.Position;
import com.chess.pieces.Blank;
import com.chess.pieces.DisplayableCell;
import com.chess.pieces.Piece;
import com.chess.pieces.pieces.Bishop;
import com.chess.pieces.pieces.King;
import com.chess.pieces.pieces.Knight;
import com.chess.pieces.pieces.Pawn;
import com.chess.pieces.pieces.Queen;
import com.chess.pieces.pieces.Rook;
import com.utils.ChessCode;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author migue
 */
public class GUITest extends javax.swing.JFrame {
    
    /**
     * Creates new form GUITest
     */
    ChessManager chess;
    Chessboard board;
    public GUITest() {
        try {
            chess = ChessManager.fromJSON(new File("src/main/resources/NewGame.json"));
        } catch (Exception ex) {
            System.out.println("ex");
            Logger.getLogger(GUITest.class.getName()).log(Level.SEVERE, null, ex);
        }
        board = chess.getChessboard();
        initComponents();
        setTablero();
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                Scanner sc = new Scanner(System.in);
                String linea;
                while(true){
                    linea = sc.nextLine();
                    if (linea.equals("t")) {
                        chess.setPromotion(Rook.class);
                    }else if (linea.equals("a")) {
                        chess.setPromotion(Bishop.class);
                    }else if (linea.equals("d")) {
                        chess.setPromotion(Queen.class);
                    }else if (linea.equals("c")) {
                        chess.setPromotion(Knight.class); 
                    }
                    setTablero();
                }
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(8, 8));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUITest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    Position lastPos = null;
    
    private void setTablero() {
        this.jPanel1.removeAll();
        DisplayableCell[][] b = board.cloneBoard();
        JButton but;
        Set<Position> movePos = null;
        Set<Position> attackPos = null;
        
        if (lastPos != null) {
            DisplayableCell  cell = board.getPiece(lastPos);
            if (!cell.blankCell() && ((Piece)cell).isWhite() == chess.isWhiteTurn()) {
                movePos = ((Piece)cell).whereCanIMove(board.cloneBoard());
                        attackPos = ((Piece)cell).whereCanIAttack(board.cloneBoard());
            }
        }
        this.jPanel1.removeAll();
        for (int i =  b.length - 1; i >= 0; i--) {
            for (int j = 0; j < b[i].length; j++) {
                DisplayableCell d= b[j][i];
                but = new JButton(d.toString());
                but.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        mover(d);
                    }
                });
                but.setBackground(Color.WHITE);
                    if ((i % 2 == 0 || j % 2 == 0) && !(i % 2 == 0 && j % 2 == 0)) {
                        but.setForeground(Color.WHITE);
                        but.setBackground(Color.BLACK);
                    }
                but.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                if (d.getPosition().equals(lastPos) && !d.blankCell() && ((Piece)d).isWhite() == chess.isWhiteTurn()) {
                    but.setBorder(BorderFactory.createLineBorder(Color.GREEN, 3));
                }else if (movePos != null && movePos.contains(d.getPosition())) {
                    but.setBorder(BorderFactory.createLineBorder(Color.GREEN, 3));
                }else if (attackPos != null && attackPos.contains(d.getPosition())) {
                    but.setBorder(BorderFactory.createLineBorder(Color.RED, 3));
                }
                this.jPanel1.add(but);
            }
        }
        this.jPanel1.validate();    
        if(chess.getState() != ChessManager.STATE_PLAYING){
            String text = "NONE";
            if (chess.getState() == ChessManager.STATE_BLACK_WON) {
                text = "JAQUE MATE: NEGRAS GANAN";
            }else if (chess.getState() == ChessManager.STATE_WHITE_WON) {
                text = "JAQUE MATE: BLANCAS GANAN";
            }else if (chess.getState() == ChessManager.STATE_DRAW) {
                text = "TABLAS";
            }
            JOptionPane.showMessageDialog(jPanel1, new JLabel(text));
        }
        
    }
    private void mover(DisplayableCell d) {
        if (lastPos == null) {
            lastPos = d.getPosition().clone();
            setTablero();
        }else{
            System.out.println("mover: " + lastPos + " " + d.getPosition());
            if (chess.move(lastPos, d.getPosition().clone()) == ChessCode.OK) {
                lastPos = null;
                setTablero();
                System.out.println(board.toString());
                
            }else{
                lastPos = d.getPosition();
                setTablero();
            }
            
        }
    }
}
